name: PR Checks

on:
  pull_request:
    branches: [ main, develop, test-ci-integration ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  # PR quality checks
  pr-checks:
    name: PR Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Check for merge conflicts
        run: |
          if git merge-base --is-ancestor HEAD origin/${{ github.base_ref }}; then
            echo "No merge conflicts detected"
          else
            echo "Merge conflicts detected"
            exit 1
          fi

      - name: Check commit message format
        run: |
          # Check latest commit message format
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ ! $COMMIT_MSG =~ ^(feat|fix|docs|style|refactor|test|chore|ci|build|perf|revert)(\(.+\))?: .+ ]]; then
            echo "Commit message does not follow conventional format: $COMMIT_MSG"
            echo "Expected format: type(scope): description"
            exit 1
          fi

      - name: Run linters
        run: go run build/ci.go lint

      - name: Check code formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'make fmt' to fix."
            gofmt -s -l .
            exit 1
          fi

      - name: Run tests
        run: go test -short ./...

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME" --include="*.go" .; then
            echo "Found TODO/FIXME comments in code"
            echo "Please resolve or document these before merging"
            exit 1
          fi

      - name: Check for debug prints
        run: |
          if grep -r "fmt\.Print\|log\.Print\|debug\.Print" --include="*.go" .; then
            echo "Found debug print statements in code"
            echo "Please remove debug prints before merging"
            exit 1
          fi

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests with coverage
        run: |
          go test -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -run=^$ ./... > benchmark.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.txt
          retention-days: 7
